name: Deploy to Staging

on:
  workflow_dispatch:
  push:
    branches: [ staging ]
  pull_request:
    branches: [ staging ]

permissions:
  contents: read

env:
  FLY_API_TOKEN: ${{ secrets.FLY_DEPLOY_TOKEN }}

jobs:
  check-service:
    name: "🔍 Pre-Deploy Health Check"
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    - uses: superfly/flyctl-actions/setup-flyctl@master
    
    - name: Check service status
      run: |
        echo "🔍 Checking current staging service status..."
        if curl -f -s ${{ vars.SERVICE_URL }}/health > /dev/null; then
          echo "✅ Service is currently running"
          echo "Deployment will proceed normally"
        else
          echo "⚠️ Service is currently DOWN"
          echo "Proceeding with deployment (service will start)"
        fi

  test-service:
    name: "🧪 Test Service"
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - uses: supabase/setup-cli@v1
      with:
        version: latest

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Install project
      run: poetry install --no-interaction
      
    - name: Install Supabase
      run: make start-supabase

    - name: Run quality checks (format, lint, test)
      run: |
        make format lint
        make test-cov
        
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}

  deploy-service:
    name: "🚀 Deploy to Staging"
    runs-on: ubuntu-latest
    needs: [check-service, test-service]
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    - uses: superfly/flyctl-actions/setup-flyctl@master

    - name: Deploy to staging
      run: make deploy ENV=staging

  validate-service:
    name: "✅ Validate Deployment"
    runs-on: ubuntu-latest
    needs: [deploy-service]
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
    - name: Health check
      run: |
        echo "🔍 Validating deployment with health check..."
        if curl -f -s ${{ vars.SERVICE_URL }}/health > /dev/null; then
          echo "✅ Service is healthy and responding"
          echo "🎉 Deployment successful!"
        else
          echo "❌ Service is not responding"
          echo "URL: ${{ vars.SERVICE_URL }}/health"
          echo "Deployment validation failed"
          exit 1
        fi 